}
}
source('~/showcase.R', encoding = 'UTF-8', echo=TRUE)
wsadź(Pudełko, Marcin)
Marcin <- baranek("Marcin")
print(Marcin)
Pudełko <- pudełko()
print(Pudełko)
Pudełko$zawartość
otwórz(Pudełko)
wsadź(Pudełko, Marcin)
Pudełko$zawartość
nastawZegar(Pudełko)
Pudełko$zawartość$czyŻyje
Pudełko$zawartość
baranek<-function(name){
b<-list(imie=name, czyŻyje=TRUE)
class(b)<-c("baranek")
b
}
nastawZegar <- function(pudełko) {
for(name in ls(envir=globalenv())) {
o <- get(name, globalenv())
if((class(o) == "pudełko") && (o$id == pudełko$id) && (!is.null(o$zawartość)) && (class(o$zawartość)=="baranek")) {
o$zawartość$czyŻyje <- NA
eval.parent(substitute(pudełko$zawartość <- o$baranek))
}
}
cat("3.. 2.. 1.. TERMINATED.")
}
otwórz <- function(pudełko) {
if(!is.null(pudełko$zawartość)){
if(is.na(pudełko$zawartość$czyŻyje)) {
bar <- collapse(pudełko)
eval.parent(substitute(pudełko$zawartość <- bar))
}
if(bar$czyŻyje) {
cat("W pudełku jest baranek. (bee bee!)")
} else {
cat("W pudełku jest zdechły baranek. (cisza)")
}
} else {
cat("Pudełko jest puste")
}
}
potrząśnij <- function(pudełko_z_barankiem) {
if(is.null(pudełko_z_barankiem$zawartość)) {
print("... (cisza)")
} else {
if(is.na(pudełko_z_barankiem$zawartość$czyŻyje)) {
bar <- collapse(pudełko_z_barankiem)
eval.parent(substitute(pudełko_z_barankiem$zawartość <- bar))
}
if(bar$czyZyje) {
print("bee! bee!")
} else {
print("... (cisza)")
}
}
}
print.baranek <- function(b) {
stopifnot(class(b) == "baranek")
cat(paste("Baranek", b$imie))
cat("
\\ ;; /
/ .. \\
\\  /
/ qp \\
/ //\\  \\
...  ...
")
}
print.pudełko <- function(pudełko) {
cat("
.----------,
;---------.'|
|         | |
|  O O O  | |
|         | /
'----------'
")
}
pudełko <- function(id = runif(1000)) {
p <-list(zawartość = NULL, id=id)
class(p) <- "pudełko"
p
}
collapse<-function(pudełko) {
ret <- NULL
for(name in ls(envir=globalenv())) {
o <- get(name, globalenv())
if((class(o) == "pudełko") && (o$id == pudełko$id) && (!is.null(o$zawartość)) && (class(o$zawartość)=="baranek")) {
o$zawartość$czyŻyje <- sample(c(TRUE, FALSE), 1)
cat("Nastąpił collapse!")
cat(o$zawatość$czyŻyje)
ret <- o$zawartość
break
}
}
ret
}
wsadź <- function(pudełko, baranek) {
if(is.null(pudełko$zawartość)) {
eval.parent(substitute(pudełko$zawartość <- baranek))
} else {
warning("Coś już jest w pudełku.")
}
}
source('~/showcase.R', encoding = 'UTF-8', echo=TRUE)
nastawZegar <- function(pudełko) {
for(name in ls(envir=globalenv())) {
o <- get(name, globalenv())
if((class(o) == "pudełko") && (o$id == pudełko$id) && (!is.null(o$zawartość)) && (class(o$zawartość)=="baranek")) {
o$zawartość$czyŻyje <- NA
eval.parent(substitute(pudełko <- o))
}
}
cat("3.. 2.. 1.. TERMINATED.")
}
Marcin <- baranek("Marcin")
print(Marcin)
Pudełko <- pudełko()
print(Pudełko)
Pudełko$zawartość
otwórz(Pudełko)
Pudełko$zawartość
wsadź(Pudełko, Marcin)
Pudełko$zawartość
Pudełko$zawartość
nastawZegar(Pudełko)
Pudełko$zawartość
Pudełko$zawartość$czyŻyje
potrzasnij(Pudełko)
otwórz(Pudełko)
potrząśnij <- function(pudełko_z_barankiem) {
if(is.null(pudełko_z_barankiem$zawartość)) {
print("... (cisza)")
} else {
if(is.na(pudełko_z_barankiem$zawartość$czyŻyje)) {
bar <- collapse(pudełko_z_barankiem)
eval.parent(substitute(pudełko_z_barankiem$zawartość <- bar))
} else {
bar <- pudełko
}
if(bar$czyZyje) {
print("bee! bee!")
} else {
print("... (cisza)")
}
}
}
otwórz <- function(pudełko) {
if(!is.null(pudełko$zawartość)){
if(is.na(pudełko$zawartość$czyŻyje)) {
bar <- collapse(pudełko)
eval.parent(substitute(pudełko$zawartość <- bar))
} else {
bar <- pudełko
}
if(bar$czyŻyje) {
cat("W pudełku jest baranek. (bee bee!)")
} else {
cat("W pudełku jest zdechły baranek. (cisza)")
}
} else {
cat("Pudełko jest puste")
}
}
source('~/showcase.R', encoding = 'UTF-8', echo=TRUE)
potrząśnij <- function(pudełko_z_barankiem) {
if(is.null(pudełko_z_barankiem$zawartość)) {
print("... (cisza)")
} else {
if(is.na(pudełko_z_barankiem$zawartość$czyŻyje)) {
bar <- collapse(pudełko_z_barankiem)
eval.parent(substitute(pudełko_z_barankiem$zawartość <- bar))
} else {
bar <- pudełko$zawartość
}
if(bar$czyZyje) {
print("bee! bee!")
} else {
print("... (cisza)")
}
}
}
otwórz <- function(pudełko) {
if(!is.null(pudełko$zawartość)){
if(is.na(pudełko$zawartość$czyŻyje)) {
bar <- collapse(pudełko)
eval.parent(substitute(pudełko$zawartość <- bar))
} else {
bar <- pudełko$zawartość
}
if(bar$czyŻyje) {
cat("W pudełku jest baranek. (bee bee!)")
} else {
cat("W pudełku jest zdechły baranek. (cisza)")
}
} else {
cat("Pudełko jest puste")
}
}
source('~/showcase.R', encoding = 'UTF-8', echo=TRUE)
```{r, echo = FALSE}
setwd("~/Bogdan/ML/pd6/Jastrzębski")
load('statPlots.rda')
load('etykiety.rda')
library(ggplot2)
library(gridExtra)
plot(shapePlot)
plot(gammaPlot)
prcomp()
prcomp(df7 %>% select(-Class))
library(mlr)
#https://www.openml.org/d/13
library(readr)
library(dplyr)
library(e1071)
prcomp(df7 %>% select(-Class))
df <- read_csv("dataset_13_breast-cancer.csv")
names(df) <- sub("-", "_", names(df))
# Usunięcie obserwacji z brakami - 9 obs
df1 <- df[!apply(df == '?', 1, any), ]
# BREAST_QUAD
df2 <- df1 %>% mutate(breast_quad_horiz = as.numeric(breast_quad == "'left_low'" | breast_quad == "'left_up'") - as.numeric(breast_quad == "'right_low'" | breast_quad == "'right_up'"),
breast_quad_vert = as.numeric(breast_quad == "'left_up'" | breast_quad == "'right_up'") - as.numeric(breast_quad == "'left_down'" | breast_quad == "'right_down'")) %>%
select(-breast_quad)
# AGE
df3 <- df2
df3$age <- 10*(as.numeric(as.factor(df2$age))+1.5)
# MENOPAUSE
df3$menopause %>% unique
df4 <- df3 %>% mutate(meno = as.numeric(menopause != "'premeno'"),
gltmeno = as.numeric(menopause == "'lt40'")) %>% select(-menopause)
df5 <- df4
s <- substr(as.character(df4$tumor_size), 2,3)
df5$tumor_size <- as.numeric(ifelse(substr(s, 2,2) == '-', substr(s, 1,1), s))+2.5
df6 <- df5
s <- substr(df5$inv_nodes, 2,3)
df6$inv_nodes <- as.numeric(ifelse(substr(s, 2,2) == '-', substr(s, 1,1), s))+1
df7 <- df6
df6$deg_malig <- as.numeric(substr(df6$deg_malig, 2,2))
df6$node_caps %>% unique
df6$breast %>% unique
df6$irradiat %>% unique
df6$Class %>% unique
df7 <- df6 %>% mutate(node_caps = as.numeric(node_caps == "'yes'"),
breast = as.numeric(breast == "'left'"),
irradiat = as.numeric(irradiat == "'yes'"),
Class = as.numeric(Class == "'recurrence-events'"))
i <- sample(1:nrow(df7), 30)
train <- df7[-i,]
valid <- df7[i,]
basic_linear <- glm(Class ~ ., data=train, family = "binomial")
predict(basic_linear, type="response")
acc_lm <- 1-mean(abs(round(predict(basic_linear, valid, type="response")) - valid$Class))
# Random Forest
train$Class <- as.factor(train$Class)
valid$Class <- as.factor(valid$Class)
task<-makeClassifTask(data = train, target = "Class")
rf_learner<-makeLearner("classif.randomForest", predict.type = "prob")
rf_model <- train(rf_learner, task)
prediction <- predict(fr_model, newdata = valid)
acc_rf <- 1 - mean(abs(as.numeric(prediction$data$response) - as.numeric(prediction$data$truth)))
# svm
s <- svm(x = train %>% select(-Class),
y = train$Class,
cost=1)
acc_svm <- 1 - mean(abs(as.numeric(as.character(predict(s, valid %>% select(-Class)))) - as.numeric(as.character(valid$Class))))
acc_rf <-1-mean(abs(as.numeric(prediction$data$response) - as.numeric(prediction$data$truth)))
#wszystkie permutacje
temp<-sapply(1:12, function(x){length(unique(df8[[x]]))})
temp<-sapply(1:12, function(x){unique(df8[[x]])})
temp<-expand.grid(temp)
names(temp)<-names(df8)
setwd("~/GitHub/WarsztatyBadawcze2")
library(e1071)
df <- read_csv("dataset_13_breast-cancer.csv")
names(df) <- sub("-", "_", names(df))
# Usunięcie obserwacji z brakami - 9 obs
df1 <- df[!apply(df == '?', 1, any), ]
# BREAST_QUAD
df2 <- df1 %>% mutate(breast_quad_horiz = as.numeric(breast_quad == "'left_low'" | breast_quad == "'left_up'") - as.numeric(breast_quad == "'right_low'" | breast_quad == "'right_up'"),
breast_quad_vert = as.numeric(breast_quad == "'left_up'" | breast_quad == "'right_up'") - as.numeric(breast_quad == "'left_down'" | breast_quad == "'right_down'")) %>%
select(-breast_quad)
# AGE
df3 <- df2
df3$age <- 10*(as.numeric(as.factor(df2$age))+1.5)
# MENOPAUSE
df3$menopause %>% unique
df4 <- df3 %>% mutate(meno = as.numeric(menopause != "'premeno'"),
gltmeno = as.numeric(menopause == "'lt40'")) %>% select(-menopause)
df5 <- df4
s <- substr(as.character(df4$tumor_size), 2,3)
df5$tumor_size <- as.numeric(ifelse(substr(s, 2,2) == '-', substr(s, 1,1), s))+2.5
df6 <- df5
s <- substr(df5$inv_nodes, 2,3)
df6$inv_nodes <- as.numeric(ifelse(substr(s, 2,2) == '-', substr(s, 1,1), s))+1
df7 <- df6
df6$deg_malig <- as.numeric(substr(df6$deg_malig, 2,2))
df6$node_caps %>% unique
df6$breast %>% unique
df6$irradiat %>% unique
df6$Class %>% unique
df7 <- df6 %>% mutate(node_caps = as.numeric(node_caps == "'yes'"),
breast = as.numeric(breast == "'left'"),
irradiat = as.numeric(irradiat == "'yes'"),
Class = as.numeric(Class == "'recurrence-events'"))
i <- sample(1:nrow(df7), 30)
train <- df7[-i,]
valid <- df7[i,]
basic_linear <- glm(Class ~ ., data=train, family = "binomial")
predict(basic_linear, type="response")
acc_lm <- 1-mean(abs(round(predict(basic_linear, valid, type="response")) - valid$Class))
# Random Forest
train$Class <- as.factor(train$Class)
valid$Class <- as.factor(valid$Class)
task<-makeClassifTask(data = train, target = "Class")
rf_learner<-makeLearner("classif.randomForest", predict.type = "prob")
rf_model <- train(rf_learner, task)
prediction <- predict(fr_model, newdata = valid)
acc_rf <- 1 - mean(abs(as.numeric(prediction$data$response) - as.numeric(prediction$data$truth)))
# svm
s <- svm(x = train %>% select(-Class),
y = train$Class,
cost=1)
acc_svm <- 1 - mean(abs(as.numeric(as.character(predict(s, valid %>% select(-Class)))) - as.numeric(as.character(valid$Class))))
acc_rf <-1-mean(abs(as.numeric(prediction$data$response) - as.numeric(prediction$data$truth)))
#wszystkie permutacje
temp<-sapply(1:12, function(x){length(unique(df8[[x]]))})
temp<-sapply(1:12, function(x){unique(df8[[x]])})
temp<-expand.grid(temp)
prcomp(df7 %>% select(-Class))
pca <- prcomp(df7 %>% select(-Class))
plot(pca)
X <- df7 %>% select(-Class)
pca <- prcomp(X)
X %*% pca$rotation
X <- df7 %>% select(-Class) %>% as.matrix
pca <- prcomp(X)
X %*% pca$rotation
(X %*% pca$rotation) %>% select(PC1, PC2)
(X %*% pca$rotation)[, "PC1"]
(X %*% pca$rotation)[, c("PC1", "PC2")]
plot((X %*% pca$rotation)[, c("PC1", "PC2")])
data <- read.csv("openml_phpJNxH0q.csv")
data
data <- read.csv("openml_phpJNxH0q.csv")
prcomp(data %>% select(-Class))
data %>% select(-Class)
prcomp(data %>% select(-Class))
X <- data %>% select(-Class)
X <- data %>% select(-Class) %>% as.matrix
prcomp(X)
X <- data %>% select(-Class) %>% as.matrix
prcomp(X)
X
parse(" 3")
as.numeric(" 3")
X <- data %>% select(-Class) %>% as.matrix %>% as.numeric
prcomp(X)
X
X
X <- data %>% select(-Class) %>% as.matrix
X
apply(X, as.numeric)
as.numeric(X)
sapply(X, as.numeric)
X <- data %>% select(-Class)
sapply(X, as.numeric)
X <- data %>% select(-Class) %>% sapply(as.numeric)
prcomp(X)
pca <- prcomp(X)
pca$rotation
X %*% pca$rotation
rotated <- X %*% pca$rotation)
rotated$PC1
rotated <- X %*% pca$rotation
rotated$PC1
rotated[,"PC1"]
plot(rotated[,"PC1"], rotated[,"PC2"])
plot(rotated[,"PC1"], rotated[,"PC2"], col = data$Class)
library(ggplot2)
as.data.frame(rotated)
ggplot(as.data.frame(rotated), aes(x = PC1, y = PC2))
ggplot(as.data.frame(rotated), aes(x = PC1, y = PC2)) %>% geom_point()
ggplot(as.data.frame(rotated), aes(x = PC1, y = PC2)) + geom_point()
ggplot(as.data.frame(rotated), aes(x = PC1, y = PC2, fill=data$Class)) +
geom_point() +
ggplot(as.data.frame(rotated), aes(x = PC1, y = PC2, fill=data$Class)) +
geom_point()
ggplot(as.data.frame(rotated), aes(x = PC1, y = PC2, fill=data$Class)) +
geom_point()
ggplot(as.data.frame(rotated), aes(x = PC1, y = PC2, fill=data$Class+1)) +
geom_point()
ggplot(as.data.frame(rotated), aes(x = PC1, y = PC2, fill=(data$Class+1))) +
geom_point()
ggplot(as.data.frame(rotated), aes(x = PC1, y = PC2, fill=(data$Class+1))) +
geom_point()
data$Class
ggplot(as.data.frame(rotated), aes(x = PC1, y = PC2, fill=(as.numeric(data$Class)+1))) +
geom_point()
ggplot(as.data.frame(rotated), aes(x = PC1, y = PC2, fill=(as.numeric(data$Class)))) +
geom_point()
ggplot(as.data.frame(rotated), aes(x = PC1, y = PC2, fill=(as.factor(data$Class)))) +
geom_point()
ggplot(cbind(as.data.frame(rotated), data$Class ), aes(x = PC1, y = PC2, fill=(as.factor(data$Class)))) +
geom_point(aes())
ggplot(cbind(as.data.frame(rotated), data$Class ), aes(x = PC1, y = PC2, fill=Class)) +
geom_point(aes())
cbind(as.data.frame(rotated), data$Class )
ggplot(cbind(as.data.frame(rotated), Class=data$Class ), aes(x = PC1, y = PC2, fill=Class)) +
geom_point(aes())
ggplot(cbind(as.data.frame(rotated), Class=data$Class), aes(x = PC1, y = PC2, fill=Class)) +
geom_point(benign = "red", malignant="blue")
ggplot(cbind(as.data.frame(rotated), Class=data$Class), aes(x = PC1, y = PC2)) +
geom_point(aes(fill=Class))
ggplot(cbind(as.data.frame(rotated), Class=data$Class), aes(x = PC1, y = PC2)) +
geom_point(aes(colour=Class))
data
linear_model <- lm(Class ~ ., data=data)
linear_model <- glm(Class ~ ., data=data, family = "binomial")
linear_model
linear_model$residuals
summary(linear_model)
linear_model$residuals
predict(linear_model)
predict(linear_model, type = "response")
plot(predict(linear_model, type = "response"))
plot(predict(linear_model, type = "response") - data$Class)
plot(predict(linear_model, type = "response") - as.numeric(data$Class))
as.numeric(data$Class)
plot(predict(linear_model, type = "response") - as.numeric(data$Class)-1)
plot(predict(linear_model, type = "response") - as.numeric(data$Class)+1)
plot(sort(predict(linear_model, type = "response") - as.numeric(data$Class)+1))
plot(sort(abs(predict(linear_model, type = "response") - as.numeric(data$Class)+1)))
plot(sort(abs(predict(linear_model, type = "response") - as.numeric(data$Class)+1)), type="l")
abs(predict(linear_model, type = "response") - as.numeric(data$Class)+1)
mean(abs(predict(linear_model, type = "response") - as.numeric(data$Class)+1))
1 - mean(abs(predict(linear_model, type = "response") - as.numeric(data$Class)+1))
linear_acc <- 1 - mean(abs(predict(linear_model, type = "response") - as.numeric(data$Class)+1))
rpart
library(rpart)
rpart()
?rpart()
rpart(Class ~ ., data=data)
tree <- rpart(Class ~ ., data=data)
plot(tree)
summary(tree)
?rpart
plot(tree)
data
tree <- rpart(Class ~ ., data=data)
plot(tree)
summary(tree)
summary(tree)
tree
predict(tree)
predict(tree)$benign
predict(tree)[,"benign"]
tree <- rpart(Class ~ ., data=data)-as.numeric(data$Class)+1
predict(tree)[,"benign"] -as.numeric(data$Class)+1
predict(tree)[,"benign"] - as.numeric(data$Class)
as.numeric(data$Class)
as.numeric(data$Class)-1
predict(tree)[,"benign"] - as.numeric(data$Class)+1
predict(tree)[,"benign"]
predict(tree)[,"benign"] + as.numeric(data$Class)-1
predict(tree)[,"benign"] + as.numeric(data$Class)
predict(tree)[,"benign"] + as.numeric(data$Class) - 2
mean(predict(tree)[,"benign"] + as.numeric(data$Class) - 2)
mean(abs(predict(tree)[,"benign"] + as.numeric(data$Class) - 2))
tree_acc <- mean(abs(predict(tree)[,"benign"] + as.numeric(data$Class) - 2))
rpart_model <- rpart(Class ~ ., data=data)
rpart_acc <- mean(abs(predict(rpart_model)[,"benign"] + as.numeric(data$Class) - 2))
plot(tree)
summary(tree)
plot(tree)
rpart_acc <- mean(abs(predict(rpart_model)[,"benign"] + as.numeric(data$Class) - 2))
rpart
rpart_acc
rpart_acc <- 1 - mean(abs(predict(rpart_model)[,"benign"] + as.numeric(data$Class) - 2))
rpart_acc
randomForest::randomForest()
library(randomForest)
?randomForest()
randomForest(Class ~ ., data=data)
rf_model <- randomForest(Class ~ ., data=data)
predict(rf_model)
as.numeric(predict(rf_model))
predict(rf_model) - data$Class
predict(rf_model) == data$Class
mean(predict(rf_model) == data$Class)
rf_acc <- mean(predict(rf_model) == data$Class)
summary(rf_model)
fr_acc
rf_acc
data$Class %>% mean
data$Class %>% as.numeric %>% mean
data$Class %>% as.numeric %>% mean - 1
?svm
library(e1071)
s <- svm(x = X,
y = data$Class,
cost=1)
acc_svm <- 1 - mean(abs(as.numeric(as.character(predict(s, valid %>% select(-Class)))) - as.numeric(as.character(valid$Class))))
predict(s)
predict(s) == data$Class
mean(predict(s) == data$Class)
acc_svm <- mean(predict(s) == data$Class)
acc_svm <- mean(predict(s) == data$Class)
