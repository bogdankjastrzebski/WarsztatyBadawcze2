I131_treatment  = I131_treatment  == "t",
query_hypothyroid  = query_hypothyroid  == "t",
query_hyperthyroid  = query_hyperthyroid  == "t",
lithium  = lithium  == "t",
goitre = goitre  == "t",
tumor = tumor  == "t",
psych = psych  == "t",
Class = Class == 'sick') %>%
cbind(createDummyFeatures(sick_t$referral_source)) %>%
select(-referral_source) %>% as.matrix() %>% as.data.frame()
sick_t$Class <- as.factor(sick_t$Class)
task <- makeClassifTask(data = sick_t, target = "Class")
rdesc <- makeResampleDesc("CV", iters=5)
auprc.measure <- makeMeasure(id = "auprc",
name = "AUPRC",
properties = c('classif'),
minimize = FALSE,
best = 1,
worst = 0,
fun = function(task, model, pred, feats, extra.args) {
auprc(pred$data$prob.1, pred$data$truth, 1)
})
classifiers <- c(
"classif.naiveBayes",
"classif.binomial",
"classif.rpart",
"classif.ctree",
"classif.C50",
"classif.boosting",
"classif.mlp",
"classif.ada",
"classif.gbm",
"classif.glmboost",
"classif.ranger",
"classif.cforest")
models <- list()
for(classif in classifiers) {
lr <- makeLearner(classif, predict.type = 'prob')
r <- resample(lr, task, rdesc, measures = list(auc, auprc.measure))
m <- train(lr, task)
models[classif] <- list(r$measures.test, predict(m, newdata=sick_test))
}
list(3,4)
list(3)
for(classif in classifiers) {
lr <- makeLearner(classif, predict.type = 'prob')
r <- resample(lr, task, rdesc, measures = list(auc, auprc.measure))
m <- train(lr, task)
models[classif] <- list(r$measures.test, predict(m, newdata=sick_test))
}
models <- list()
for(classif in classifiers) {
lr <- makeLearner(classif, predict.type = 'prob')
r <- resample(lr, task, rdesc, measures = list(auc, auprc.measure))
m <- train(lr, task)
models[classif] <- list(r$measures.test, predict(m, newdata=sick_test))
}
models <- list()
for(classif in classifiers) {
lr <- makeLearner(classif, predict.type = 'prob')
r <- resample(lr, task, rdesc, measures = list(auc, auprc.measure))
m <- train(lr, task)
models[classif] <- list(r$measures.test) #, predict(m, newdata=sick_test))
}
print(p)
models[classif] <- list(r$measures.test)
for(classif in classifiers) {
lr <- makeLearner(classif, predict.type = 'prob')
r <- resample(lr, task, rdesc, measures = list(auc, auprc.measure))
m <- train(lr, task)
p <- predict(m, newdata=sick_test)
print(p)
models[classif] <- list(r$measures.test)
}
models <- list()
for(classif in classifiers) {
lr <- makeLearner(classif, predict.type = 'prob')
r <- resample(lr, task, rdesc, measures = list(auc, auprc.measure))
m <- train(lr, task)
p <- predict(m, newdata=sick_test)
print(p)
models[classif] <- list(r$measures.test)
}
for(classif in classifiers) {
m <- train(lr, task)
p <- predict(m, newdata=sick_test)
lr <- makeLearner(classif, predict.type = 'prob')
r <- resample(lr, task, rdesc, measures = list(auc, auprc.measure))
print(p)
models[classif] <- list(r$measures.test)
}
models <- list()
for(classif in classifiers) {
m <- train(lr, task)
p <- predict(m, newdata=sick_test)
lr <- makeLearner(classif, predict.type = 'prob')
r <- resample(lr, task, rdesc, measures = list(auc, auprc.measure))
print(p)
models[classif] <- list(r$measures.test)
}
m <- train(lr, task)
m <- train(lr, task)
p <- predict(m, newdata=sick_test)
p
predict(m, newdata=sick_test)
sick_test
sick_t <- sick_t %>% mutate(sex = sex == "F",
on_thyroxine = on_thyroxine == "t",
query_on_thyroxine = query_on_thyroxine == "t",
on_antithyroid_medication = on_antithyroid_medication == "t",
sick = sick == "t",
pregnant = pregnant == "t",
thyroid_surgery = thyroid_surgery == "t",
I131_treatment  = I131_treatment  == "t",
query_hypothyroid  = query_hypothyroid  == "t",
query_hyperthyroid  = query_hyperthyroid  == "t",
lithium  = lithium  == "t",
goitre = goitre  == "t",
tumor = tumor  == "t",
psych = psych  == "t",
Class = Class == 'sick') %>%
cbind(createDummyFeatures(sick_t$referral_source)) %>%
select(-referral_source) %>% as.matrix() %>% as.data.frame()
sick_t$Class <- as.factor(sick_t$Class)
task <- makeClassifTask(data = sick_t, target = "Class")
rdesc <- makeResampleDesc("CV", iters=5)
auprc.measure <- makeMeasure(id = "auprc",
name = "AUPRC",
properties = c('classif'),
minimize = FALSE,
best = 1,
worst = 0,
fun = function(task, model, pred, feats, extra.args) {
auprc(pred$data$prob.1, pred$data$truth, 1)
})
sick_t <- sick_tidy %>%
mutate(log_TSH = log(TSH),
sqrt_T3 = sqrt(T3),
sqrt_TT4 = sqrt(TT4),
log_T4U = log(T4U),
sqrt_FTI = sqrt(FTI)) %>%
dplyr::select(-TSH, -T3, -TT4, -T4U, -FTI)
#############################################
sick_t <- sick_t %>% mutate(sex = sex == "F",
on_thyroxine = on_thyroxine == "t",
query_on_thyroxine = query_on_thyroxine == "t",
on_antithyroid_medication = on_antithyroid_medication == "t",
sick = sick == "t",
pregnant = pregnant == "t",
thyroid_surgery = thyroid_surgery == "t",
I131_treatment  = I131_treatment  == "t",
query_hypothyroid  = query_hypothyroid  == "t",
query_hyperthyroid  = query_hyperthyroid  == "t",
lithium  = lithium  == "t",
goitre = goitre  == "t",
tumor = tumor  == "t",
psych = psych  == "t",
Class = Class == 'sick') %>%
cbind(createDummyFeatures(sick_t$referral_source)) %>%
select(-referral_source) %>% as.matrix() %>% as.data.frame()
sick_test <- sick_t %>% filter(!ind) %>% select(-ind)
sick_t <- sick_t %>% filter(ind) %>% select(-ind)
sick_test <- sick_t %>% filter(!ind) %>% select(-ind)
sick_t <- sick_t %>% filter(ind == 1) %>% select(-ind)
sick_t$Class <- as.factor(sick_t$Class)
task <- makeClassifTask(data = sick_t, target = "Class")
rdesc <- makeResampleDesc("CV", iters=5)
auprc.measure <- makeMeasure(id = "auprc",
name = "AUPRC",
properties = c('classif'),
minimize = FALSE,
best = 1,
worst = 0,
fun = function(task, model, pred, feats, extra.args) {
auprc(pred$data$prob.1, pred$data$truth, 1)
})
classifiers <- c(
"classif.naiveBayes",
"classif.binomial",
"classif.rpart",
"classif.ctree",
"classif.C50",
"classif.boosting",
"classif.mlp",
"classif.ada",
"classif.gbm",
"classif.glmboost",
"classif.ranger",
"classif.cforest")
models <- list()
for(classif in classifiers) {
m <- train(lr, task)
p <- predict(m, newdata=sick_test)
lr <- makeLearner(classif, predict.type = 'prob')
r <- resample(lr, task, rdesc, measures = list(auc, auprc.measure))
print(p)
models[classif] <- list(r$measures.test)
}
models
classifiers <- c(
"classif.naiveBayes") #,
models <- list()
for(classif in classifiers) {
m <- train(lr, task)
p <- predict(m, newdata=sick_test)
lr <- makeLearner(classif, predict.type = 'prob')
r <- resample(lr, task, rdesc, measures = list(auc, auprc.measure))
models[classif] <- list(r$measures.test)
}
models
models[classif] <- list(r$measures.test, p)
for(classif in classifiers) {
m <- train(lr, task)
p <- predict(m, newdata=sick_test)
lr <- makeLearner(classif, predict.type = 'prob')
r <- resample(lr, task, rdesc, measures = list(auc, auprc.measure))
models[classif] <- list(r$measures.test, p)
}
models <- list()
for(classif in classifiers) {
m <- train(lr, task)
p <- predict(m, newdata=sick_test)
lr <- makeLearner(classif, predict.type = 'prob')
r <- resample(lr, task, rdesc, measures = list(auc, auprc.measure))
models[classif] <- list(r$measures.test, p)
}
models <- list()
for(classif in classifiers) {
m <- train(lr, task)
p <- predict(m, newdata=sick_test)
lr <- makeLearner(classif, predict.type = 'prob')
r <- resample(lr, task, rdesc, measures = list(auc, auprc.measure))
models[classif] <- list(r$measures.test, p)
}
models[[classif]] <- list(r$measures.test, p)
models <- list()
for(classif in classifiers) {
m <- train(lr, task)
p <- predict(m, newdata=sick_test)
lr <- makeLearner(classif, predict.type = 'prob')
r <- resample(lr, task, rdesc, measures = list(auc, auprc.measure))
models[[classif]] <- list(r$measures.test, p)
}
models
models <- list()
for(classif in classifiers) {
m <- train(lr, task)
p <- predict(m, newdata=sick_test)
lr <- makeLearner(classif, predict.type = 'prob')
r <- resample(lr, task, rdesc, measures = list(auc, auprc.measure))
models[[classif]] <- list(r$measures.test, p)
}
models
models$classif.naiveBayes[1]
kable(models$classif.naiveBayes[1])
lapply(models, function(tup) tup[2])
sapply(models, function(tup) tup[2])
models
models$a = models$classif.naiveBayes
sapply(models, function(tup) tup[2])
sapply(models, function(tup) tup[2])
sapply(models, function(tup) tup[2])[1]
kable(sapply(models, function(tup) tup[2])[1])
sapply(models, function(tup) tup[2])[1]
sapply(models, function(tup) auprc(tup[2]$data[,3], tup[2]$data$truth, 1))[1]
sapply(models, function(tup) auprc(tup[[2]]$data[,3], tup[[2]]$data$truth, 1))[1]
sapply(models, function(tup) auprc(tup[[2]]$data[,3], tup[[2]]$data$truth, 1))
t(sapply(models, function(tup) auprc(tup[[2]]$data[,3], tup[[2]]$data$truth, 1)))
t(t(sapply(models, function(tup) auprc(tup[[2]]$data[,3], tup[[2]]$data$truth, 1))))
models[[classif]] <- list(r$measures.test, p)
for(classif in classifiers) {
lr <- makeLearner(classif, predict.type = 'prob')
m <- train(lr, task)
p <- predict(m, newdata=sick_test)
r <- resample(lr, task, rdesc, measures = list(auc, auprc.measure))
models[[classif]] <- list(r$measures.test, p)
}
classifiers <- c(
"classif.naiveBayes",
"classif.binomial",
"classif.rpart",
"classif.ctree",
"classif.C50",
"classif.boosting",
"classif.mlp",
"classif.ada",
"classif.gbm",
"classif.glmboost",
"classif.ranger",
"classif.cforest")
models <- list()
for(classif in classifiers) {
lr <- makeLearner(classif, predict.type = 'prob')
m <- train(lr, task)
p <- predict(m, newdata=sick_test)
r <- resample(lr, task, rdesc, measures = list(auc, auprc.measure))
models[[classif]] <- list(r$measures.test, p)
}
kable(r$measures.test[1])
kable(r$measures.test)
kable(r$measures.test)
kable(models$classif.C50[1])
kable(models$classif.C50[[1]])
as.matrix(sapply(models, function(tup) auprc(tup[[2]]$data[,3], tup[[2]]$data$truth, 1)))
m <- as.matrix(sapply(models, function(tup) auprc(tup[[2]]$data[,3], tup[[2]]$data$truth, 1)))
colnames(m)
as.data.frame(m)
colnames(m)
names(m)
col(m)
m
m <- as.data.frame(as.matrix(sapply(models, function(tup) auprc(tup[[2]]$data[,3], tup[[2]]$data$truth, 1))))
m
colnames(m)
colnames(m) <- "auprc"
kable(as.matrix(sapply(models, function(tup) auprc(tup[[2]]$data[,3], tup[[2]]$data$truth, 1))))
m <- as.data.frame(as.matrix(sort(sapply(models, function(tup) auprc(tup[[2]]$data[,3], tup[[2]]$data$truth, 1)))))
colnames(m) <- "auprc"
m
otask <- oversample(task)
sick_t
sick_t$Class %>% table()
otask_knn <- oversample(task_knn, rate=5)
om <- as.data.frame(as.matrix(sort(sapply(omodels, function(tup) auprc(tup[[2]]$data[,3], tup[[2]]$data$truth, 1)))))
cbind(m,m)
m <- as.data.frame(as.matrix(sort(sapply(models, function(tup) auprc(tup[[2]]$data[,3], tup[[2]]$data$truth, 1)))))
m
m %>% sort
sapply(models, function(tup) auprc(tup[[2]]$data[,3], tup[[2]]$data$truth, 1))
rpart.plot(train(makeLearner("classif.rpart", predict.type = 'prob'), task)$learner.model)
rpart.plot(train(makeLearner("classif.rpart", predict.type = 'prob'), otask)$learner.model)
otask <- oversample(task, rate=5)
rpart.plot(train(makeLearner("classif.rpart", predict.type = 'prob'), otask)$learner.model)
rpart.plot(train(makeLearner("classif.rpart", predict.type = 'prob'), task)$learner.model)
rpart.plot(train(makeLearner("classif.rpart", predict.type = 'prob'), otask)$learner.model)
lr <- makeLearner(classif, predict.type = 'prob')
m <- train(lr, task)
p <- predict(m, newdata=sick_test)
om <- train(lr, otask)
op <- predict(om, newdata=sick_test)
r <- suppressWarnings(resample(lr, task, rdesc, measures = list(auc, auprc.measure)))
classif <- "classif.binomial"
r <- suppressWarnings(resample(lr, task, rdesc, measures = list(auc, auprc.measure)))
lr <- makeLearner(classif, predict.type = 'prob')
m <- train(lr, task)
p <- predict(m, newdata=sick_test)
om <- train(lr, otask)
op <- predict(om, newdata=sick_test)
r <- suppressWarnings(resample(lr, task, rdesc, measures = list(auc, auprc.measure)))
or <- suppressWarnings(resample(lr, otask, rdesc, measures = list(auc, auprc.measure)))
models[[classif]] <- list(r$measures.test, p)
omodels[[classif]] <- list(or$measures.test, op)
library(mlr)
#https://www.openml.org/d/13
library(readr)
library(dplyr)
library(e1071)
df <- read_csv("dataset_13_breast-cancer.csv")
names(df) <- sub("-", "_", names(df))
# Usunięcie obserwacji z brakami - 9 obs
df1 <- df[!apply(df == '?', 1, any), ]
setwd("~/GitHub/WarsztatyBadawcze2")
library(mlr)
#https://www.openml.org/d/13
library(readr)
library(dplyr)
library(e1071)
df <- read_csv("dataset_13_breast-cancer.csv")
names(df) <- sub("-", "_", names(df))
# Usunięcie obserwacji z brakami - 9 obs
df1 <- df[!apply(df == '?', 1, any), ]
# BREAST_QUAD
df2 <- df1 %>% mutate(breast_quad_horiz = as.numeric(breast_quad == "'left_low'" | breast_quad == "'left_up'") - as.numeric(breast_quad == "'right_low'" | breast_quad == "'right_up'"),
breast_quad_vert = as.numeric(breast_quad == "'left_up'" | breast_quad == "'right_up'") - as.numeric(breast_quad == "'left_down'" | breast_quad == "'right_down'")) %>%
select(-breast_quad)
# AGE
df3 <- df2
df3$age <- 10*(as.numeric(as.factor(df2$age))+1.5)
# MENOPAUSE
df3$menopause %>% unique
df4 <- df3 %>% mutate(meno = as.numeric(menopause != "'premeno'"),
gltmeno = as.numeric(menopause == "'lt40'")) %>% select(-menopause)
df5 <- df4
s <- substr(as.character(df4$tumor_size), 2,3)
df5$tumor_size <- as.numeric(ifelse(substr(s, 2,2) == '-', substr(s, 1,1), s))+2.5
df6 <- df5
s <- substr(df5$inv_nodes, 2,3)
df6$inv_nodes <- as.numeric(ifelse(substr(s, 2,2) == '-', substr(s, 1,1), s))+1
df7 <- df6
df6$deg_malig <- as.numeric(substr(df6$deg_malig, 2,2))
df6$node_caps %>% unique
df6$breast %>% unique
df6$irradiat %>% unique
df6$Class %>% unique
df7 <- df6 %>% mutate(node_caps = as.numeric(node_caps == "'yes'"),
breast = as.numeric(breast == "'left'"),
irradiat = as.numeric(irradiat == "'yes'"),
Class = as.numeric(Class == "'recurrence-events'"))
i <- sample(1:nrow(df7), 30)
train <- df7[-i,]
valid <- df7[i,]
basic_linear <- glm(Class ~ ., data=train, family = "binomial")
predict(basic_linear, type="response")
acc_lm <- 1-mean(abs(round(predict(basic_linear, valid, type="response")) - valid$Class))
# Random Forest
train$Class <- as.factor(train$Class)
valid$Class <- as.factor(valid$Class)
task<-makeClassifTask(data = train, target = "Class")
rf_learner<-makeLearner("classif.randomForest", predict.type = "prob")
rf_model <- train(rf_learner, task)
prediction <- predict(rf_model, newdata = valid)
acc_rf <- 1 - mean(abs(as.numeric(prediction$data$response) - as.numeric(prediction$data$truth)))
# svm
s <- svm(x = train %>% select(-Class),
y = train$Class,
cost=1)
acc_svm <- 1 - mean(abs(as.numeric(as.character(predict(s, valid %>% select(-Class)))) - as.numeric(as.character(valid$Class))))
acc_rf <-1-mean(abs(as.numeric(prediction$data$response) - as.numeric(prediction$data$truth)))
df8<-df7
df8$Class<-as.factor(df7$Class)
acc_rf
df8<-df7
df8$Class<-as.factor(df7$Class)
#wszystkie permutacje
temp<-sapply(1:12, function(x){length(unique(df8[[x]]))})
temp<-sapply(1:12, function(x){unique(df8[[x]])})
temp<-expand.grid(temp)
names(temp)<-names(df8)
#losowe
random<-sapply(1:12,FUN = function(x){df8[sample(1:277,100000,replace = TRUE),x]})
random<-data.frame(random)
task_random<-makeClassifTask(data = random, target = "Class")
prediction <- predict(rf_model, task_random)
response<-prediction$data$response
random$Class<-response
#pewnosc klasy
#certainty<-((prediction$data$prob.0-0.5)^2)*4
certainty<-abs(prediction$data$prob.0-0.5)*2
#task_random<-makeClassifTask(data = random, target = "Class",weights = certainty)
task_random<-makeClassifTask(data = random, target = "Class")
#permutacje
task_all<-makeClassifTask(data = temp, target = "Class")
prediction <- predict(rf_model, task_all)
response<-prediction$data$response
temp$Class<-response
#pewnosc klasy
#certainty<-((prediction$data$prob.0-0.5)^2)*4
certainty<-abs(prediction$data$prob.0-0.5)*2
hist(certainty)
#task_all<-makeClassifTask(data = temp, target = "Class",weights = certainty)
task_all<-makeClassifTask(data = temp, target = "Class")
sure<-certainty>0.3
#task_sure<-makeClassifTask(data = temp[sure,], target = "Class",weights = certainty[sure])
task_sure<-makeClassifTask(data = temp[sure,], target = "Class")
#
learner<-makeLearner("classif.rpart", predict.type = "prob")
#0.7942238
model_rpart_random <- train(learner, task_random)
prediction <- predict(model_rpart_random, task)
acc_rpart_random <-1-mean(abs(as.numeric(prediction$data$response) - as.numeric(prediction$data$truth)))
#0.7870036
model_rpart_all <- train(learner, task_all)
prediction <- predict(model_rpart_all, task)
acc_rpart_all <-1-mean(abs(as.numeric(prediction$data$response) - as.numeric(prediction$data$truth)))
pairs(df)
df
library(ggplot2)
library(rpart)
library(randomForest)
library(e1071)
data <- read.csv("openml_phpJNxH0q.csv")
data
data <- read.csv("openml_phpJNxH0q.csv")
X <- data %>% select(-Class) %>% sapply(as.numeric)
pca <- prcomp(X)
rotated <- X %*% pca$rotation
ggplot(cbind(as.data.frame(rotated), Class=data$Class), aes(x = PC1, y = PC2)) +
geom_point(aes(colour=Class))
names(df)
names(data)
df8
prcomp(df8)
prcomp(as.matrix(df8))
as.matrix(df8)
df8
df7
as.numeric(df7)
as.matrix(df7)
prcomp(as.matrix(df7))
p <- prcomp(as.matrix(df7))
r <- as.matrix(df7) %*% p$rotation
ggplot(cbind(as.data.frame(r), Class=data$Class), aes(x = PC1, y = PC2)) +
geom_point(aes(colour=Class))
ggplot(cbind(as.data.frame(r), Class=df7$Class), aes(x = PC1, y = PC2)) +
geom_point(aes(colour=Class))
ggplot(cbind(as.data.frame(r), Class=as.factor(df7$Class)), aes(x = PC1, y = PC2)) +
geom_point(aes(colour=Class))
ggplot(cbind(as.data.frame(r), Class=as.factor(df7$Class)), aes(x = PC1, y = PC3)) +
geom_point(aes(colour=Class))
ggplot(cbind(as.data.frame(r), Class=as.factor(df7$Class)), aes(x = PC2, y = PC3)) +
geom_point(aes(colour=Class))
pairs(df7)
ggplot(cbind(as.data.frame(r), Class=as.factor(df7$Class)), aes(x = PC1, y = PC3)) +
geom_point(aes(colour=Class))
pairs(df7)
df7
df7$inv_nodes
hist(df7$inv_nodes)
log(df7$inv_nodes)
hist(log(df7$inv_nodes))
hist(sqrt(df7$inv_nodes))
hist(log(df7$inv_nodes))
